// ... existing code ...
          python-version: '3.12'
      
      - name: 安装依赖
+       uses: astral-sh/setup-uv@v1
+ 
+     - name: 安装项目依赖与检查工具
        run: |
-         pip install --upgrade pip
-         
-         # 使用pip直接安装依赖
-         if [ -f "pyproject.toml" ]; then
-           echo "使用pyproject.toml安装依赖"
-           pip install -e .
-         elif [ -f "requirements.txt" ]; then
-           echo "使用requirements.txt安装依赖"
-           pip install -r requirements.txt
-         else
-           echo "未找到依赖文件，直接安装Django和其他必要依赖"
-           pip install django djangorestframework djangorestframework-simplejwt markdown
-         fi
-         
-         # 安装代码检查工具
-         pip install black isort flake8
-         
-         # 确认Django已安装
-         python -c "import django; print(f'Django版本: {django.__version__}')"
+         # 安装项目依赖
+         uv pip install -e .
+ 
+         # 安装代码检查工具
+         uv pip install black isort flake8
+ 
+         # 确认Django已安装
+         uv run python -c "import django; print(f'Django版本: {django.__version__}')"
      
      - name: 运行代码风格检查
        id: lint
// ... existing code ...
          cd blog
-         python manage.py check || echo "项目检查失败，但继续执行下一步"
+         uv run python manage.py check || echo "项目检查失败，但继续执行下一步"

  basic-integration:
    name: 基本集成测试
// ... existing code ...
          python-version: '3.12'
      
      - name: 安装依赖
+       uses: astral-sh/setup-uv@v1
+ 
+     - name: 安装项目依赖与MySQL客户端
        run: |
-         pip install --upgrade pip
-         
-         # 使用pip直接安装依赖
-         if [ -f "pyproject.toml" ]; then
-           echo "使用pyproject.toml安装依赖"
-           pip install -e .
-         elif [ -f "requirements.txt" ]; then
-           echo "使用requirements.txt安装依赖"
-           pip install -r requirements.txt
-         else
-           echo "未找到依赖文件，直接安装Django和其他必要依赖"
-           pip install django djangorestframework djangorestframework-simplejwt markdown mysqlclient
-         fi
-         
-         # 安装MySQL客户端
-         pip install mysqlclient
-         
-         # 确认Django已安装
-         python -c "import django; print(f'Django版本: {django.__version__}')"
+         # 安装项目依赖
+         uv pip install -e .
+ 
+         # 安装MySQL客户端
+         uv pip install mysqlclient
+ 
+         # 确认Django已安装
+         uv run python -c "import django; print(f'Django版本: {django.__version__}')"
      
      - name: 配置测试环境
        run: |
          cd blog
          echo "SECRET_KEY=test-secret-key-for-ci" > .env
          echo "DEBUG=True" >> .env
          echo "DATABASE_URL=mysql://root:rootpassword@localhost:3306/test_blog" >> .env
      
      - name: 检查Django项目
        run: |
          cd blog
-         python manage.py check || echo "项目检查失败，但继续执行下一步"
+         uv run python manage.py check || echo "项目检查失败，但继续执行下一步"
      
      # - name: 尝试运行数据库迁移
      #   continue-on-error: true
// ... existing code ...
      #   run: |
      #     cd blog
      #     python manage.py migrate --fake-initial || python manage.py migrate --run-syncdb || echo "数据库迁移跳过，继续执行下一步"
+     
+     - name: 创建日志目录
+       run: |
+         mkdir -p blog/logs
      
      - name: 验证Django项目能启动
        run: |
          cd blog
-         timeout 10s python manage.py runserver > /dev/null 2>&1 || echo "服务已启动并停止"
+         timeout 10s uv run python manage.py runserver || echo "服务启动失败或超时停止"
  
  final-report:
    name: 测试结果报告
// ... existing code ...
